Unit I - Linked List Basics	
This unit is dedicated to the linked list, which can be used as a basis for other abstract data types.	
	
Task	Explanation: Linked Lists. How do they work?
Description	Getting started: what is a Linked List?
Assignment	A Linked List consists of any number of list items, where each item allows to access its successor. In order to access a value, you can start at the head of the list (using #firstItem) and then iterate to any index, by using #nextItem.
Achievements	
	
Task	Implementation: Have I got any?
Description	Implement a test for emptyness on the list.
Assignment	Since we often want to check, if there are any items in the list, a method for this task would be handy. It shall return true, if the list contains no items and false otherwise.
Traits	
Testset	
Code	isEmpty ^true | false
Achievements	List
	
Task	Implementation: How many?
Description	Implement a method which returns the size of the list.
Assignment	We can now check, if we have any items in the list. But it would be cooler, if we knew, how many exactly there are. Implement a method, which returns the number of items in the list as a number.
Traits	TZzAddFirstOperation
Testset	ZzQuestTestCase>>#testImplementsUiClass
Code	size
	    ^ 42
Achievements	List
		
Task	Explanation: Run-time complexity
Description	The basics of O-Notation
Assignment	Read http://en.wikipedia.org/wiki/Big_O_notation
Context	
Achievements	O-Notation
	
Task	Multiple Choice: Can we check the size efficiently?
Description	The complexity of the size operation
Assignment	Now that we have implemented a size operation and learned about complexity, we can estimate, how elaborate it is, to calculate the size of a Linked List. The complexity is...
Choices	a => constant - O(1), b => linear - O(n), c => quadratic - O(n²)
Solution	b
Achievements	List, O-Notation